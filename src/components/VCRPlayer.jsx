/*
Auto-generated by: https://github.com/pmndrs/gltfjsx
Command: npx gltfjsx@6.5.3 public/models/vcr_player.glb 
Author: twunnyphaiv (https://sketchfab.com/twunnyphaiv)
License: CC-BY-4.0 (http://creativecommons.org/licenses/by/4.0/)
Source: https://sketchfab.com/3d-models/vcr-player-98951dfd481b432b883b128222ea24ae
Title: VCR Player
*/

import React, { useLayoutEffect, useRef } from "react";
import { useFrame } from "@react-three/fiber";
import gsap from "gsap";
import { useGLTF, useScroll } from "@react-three/drei";

export function VCRPlayer(props) {
  const { nodes, materials } = useGLTF("./models/vcr_player.glb");
  const ref = useRef();
  const tl = useRef();

  const scroll = useScroll();

  useFrame(() => {
    tl.current.seek(scroll.offset * tl.current.duration());
  });

  useLayoutEffect(() => {
    tl.current = gsap.timeline();

    // Move the VCR player to the left
    tl.current.to(
      ref.current.position,
      {
        x: -4,
        duration: 2,
      },
      0
    );

    // // Zoom in and out on the VCR player
    // tl.current.to(
    //   ref.current.scale,
    //   {
    //     z: Math.sin(Math.PI * 2 * tl.current.time()),
    //     duration: 2,
    //   },
    //   0
    // );

    // Rotate the VCR player clockwise
    // tl.current.to(
    //   ref.current.rotation,
    //   {
    //     y: Math.sin((Math.PI * tl.current.time()) / 2),
    //     duration: 2,
    //   },
    //   0
    // );
  }, []);

  return (
    <group {...props} dispose={null} ref={ref}>
      <group rotation={[-Math.PI / 2, 0, 0]}>
        <mesh geometry={nodes.Object_2.geometry} material={materials.Screws} />
        <mesh geometry={nodes.Object_3.geometry} material={materials.Buttons} />
        <mesh
          geometry={nodes.Object_4.geometry}
          material={materials.JackInner}
        />
        <mesh geometry={nodes.Object_5.geometry} material={materials.Main} />
      </group>
    </group>
  );
}

useGLTF.preload("./models/vcr_player.glb");
